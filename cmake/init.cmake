function(cmake_helpers_init)
  #
  # We use GNU standard for installation
  #
  include(GNUInstallDirs)
  #
  # Common include files
  #
  include(CheckIncludeFile)
  check_include_file("ctype.h"        HAVE_CTYPE_H)
  check_include_file("errno.h"        HAVE_ERRNO_H)
  check_include_file("fcntl.h"        HAVE_FCNTL_H)
  check_include_file("features.h"     HAVE_FEATURES_H)
  check_include_file("float.h"        HAVE_FLOAT_H)
  check_include_file("inttypes.h"     HAVE_INTTYPES_H)
  check_include_file("io.h"           HAVE_IO_H)
  check_include_file("langinfo.h"     HAVE_LANGINFO_H)
  check_include_file("limits.h"       HAVE_LIMITS_H)
  check_include_file("locale.h"       HAVE_LOCALE_H)
  check_include_file("locale.h"       HAVE_LOCALE_H)
  check_include_file("math.h"         HAVE_MATH_H)
  check_include_file("memory.h"       HAVE_MEMORY_H)
  check_include_file("poll.h"         HAVE_POLL_H)
  check_include_file("process.h"      HAVE_PROCESS_H)
  check_include_file("pwd.h"          HAVE_PWD_H)
  check_include_file("regex.h"        HAVE_REGEX_H)
  check_include_file("signal.h"       HAVE_SIGNAL_H)
  check_include_file("stdarg.h"       HAVE_STDARG_H)
  check_include_file("stddef.h"       HAVE_STDDEF_H)
  check_include_file("stdint.h"       HAVE_STDINT_H)
  check_include_file("stdio.h"        HAVE_STDIO_H)
  check_include_file("stdlib.h"       HAVE_STDLIB_H)
  check_include_file("string.h"       HAVE_STRING_H)
  check_include_file("strings.h"      HAVE_STRINGS_H)
  check_include_file("sys/inttypes.h" HAVE_SYS_INTTYPES_H)
  check_include_file("sys/stat.h"     HAVE_SYS_STAT_H)
  check_include_file("sys/stdint.h"   HAVE_SYS_STDINT_H)
  check_include_file("sys/time.h"     HAVE_SYS_TIME_H)
  check_include_file("sys/types.h"    HAVE_SYS_TYPES_H)
  check_include_file("time.h"         HAVE_TIME_H)
  check_include_file("unistd.h"       HAVE_UNISTD_H)
  check_include_file("utime.h"        HAVE_UTIME_H)
  check_include_file("wchar.h"        HAVE_WCHAR_H)
  check_include_file("wctype.h"       HAVE_WCTYPE_H)
  check_include_file("windows.h"      HAVE_WINDOWS_H)
  #
  # Check math library
  #
  include(CheckSymbolExists)
  check_symbol_exists(log "math.h" HAVE_LOG)
  check_symbol_exists(exp "math.h" HAVE_EXP)
  if(NOT (HAVE_LOG AND HAVE_EXP))
    unset(HAVE_LOG CACHE)
    unset(HAVE_EXP CACHE)
    set(CMAKE_REQUIRED_LIBRARIES_BACKUP ${CMAKE_REQUIRED_LIBRARIES})
    list(APPEND CMAKE_REQUIRED_LIBRARIES "m")
    check_symbol_exists(log "math.h" HAVE_LOG)
    check_symbol_exists(exp "math.h" HAVE_EXP)
    if(HAVE_LOG AND HAVE_EXP)
      set(CMAKE_MATH_LIBS "m" CACHE STRING "Math library" FORCE)
      mark_as_advanced(CMAKE_MATH_LIBS)
      #
      # Continue the tests with the math lib
      #
    else()
      #
      # Restore original CMAKE_REQUIRED_LIBRARIES
      #
      set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES_BACKUP})
    endif()
  endif()
  #
  # Common features checks
  #
  cmake_helpers_try_run(EBCDIC ${PROJECT_SOURCE_DIR}/cmake/EBCDIC.c)
  cmake_helpers_try_run(C_INLINE ${PROJECT_SOURCE_DIR}/cmake/inline.c inline __inline__ inline__ __inline)
  IF (C_INLINE)
    if(C_INLINE STREQUAL inline)
      set(_c_inline_is_inline 1)
    else()
      unset(_c_inline_is_inline)
    endif()
    set(C_INLINE_IS_INLINE ${_c_inline_is_inline} CACHE BOOL "C inline keyword is inline" FORCE)
    mark_as_advanced(C_INLINE_IS_INLINE)
  endif()
  cmake_helpers_try_run(C_FORCEINLINE ${PROJECT_SOURCE_DIR}/cmake/forceinline.c forceinline __forceinline__ forceinline__ __forceinline)
  cmake_helpers_try_run(C_VA_COPY ${PROJECT_SOURCE_DIR}/cmake/va_copy.c va_copy _va_copy __va_copy)
  cmake_helpers_try_run(C_VSNPRINTF ${PROJECT_SOURCE_DIR}/cmake/vsnprintf.c vsnprintf _vsnprintf __vsnprintf)
  cmake_helpers_try_run(C_FILENO ${PROJECT_SOURCE_DIR}/cmake/fileno.c fileno _fileno __fileno)
  cmake_helpers_try_run(C_LOCALTIME_R ${PROJECT_SOURCE_DIR}/cmake/localtime_r.c localtime_r _localtime_r __localtime_r)
  cmake_helpers_try_run(C_WRITE ${PROJECT_SOURCE_DIR}/cmake/write.c write _write __write)
  cmake_helpers_try_run(C_LOG2 ${PROJECT_SOURCE_DIR}/cmake/log2.c log2)
  cmake_helpers_try_run(C_LOG2F ${PROJECT_SOURCE_DIR}/cmake/log2f.c log2f)
  cmake_helpers_try_value(C_CHAR_BIT ${PROJECT_SOURCE_DIR}/cmake/CHAR_BIT.c CHAR_BIT)
  if(NOT C_CHAR_BIT_FOUND)
    #
    # We must have a value for CHAR_BIT...
    #
    message(WARNING "Unable to find CHAR_BIT - Assuming 8")
    set(C_CHAR_BIT "8" CACHE STRING "C_CHAR_BIT forced value" FORCE)
    mark_as_advanced(C_CHAR_BIT)
  endif()
  #
  # It is impossible to have less then 8
  #
  if(C_CHAR_BIT LESS 8)
    message(FATAL_ERROR "CHAR_BIT size is ${C_CHAR_BIT} < 8")
  endif()
  cmake_helpers_try_run(C_STRTOLD ${PROJECT_SOURCE_DIR}/cmake/strtold.c strtold _strtold __strtold)
  cmake_helpers_try_run(C_STRTOD ${PROJECT_SOURCE_DIR}/cmake/strtod.c strtod _strtod __strtod)
  cmake_helpers_try_run(C_STRTOF ${PROJECT_SOURCE_DIR}/cmake/strtof.c strtof _strtof __strtof)

  cmake_helpers_try_run(C_HUGE_VAL ${PROJECT_SOURCE_DIR}/cmake/HUGE_VAL.c HUGE_VAL)
  if(NOT C_HUGE_VAL_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_HUGE_VAL_REPLACEMENT)
      cmake_helpers_try_run(C_HUGE_VAL_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/HUGE_VAL.c)
    endblock()
  endif()

  cmake_helpers_try_run(C_HUGE_VALF ${PROJECT_SOURCE_DIR}/cmake/HUGE_VALF.c HUGE_VALF)
  if(NOT C_HUGE_VALF_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_HUGE_VALF_REPLACEMENT)
      cmake_helpers_try_run(C_HUGE_VALF_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/HUGE_VALF.c)
    endblock()
  endif()

  cmake_helpers_try_run(C_HUGE_VALL ${PROJECT_SOURCE_DIR}/cmake/HUGE_VALL.c HUGE_VALL)
  if(NOT C_HUGE_VALL_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_HUGE_VALL_REPLACEMENT)
      cmake_helpers_try_run(C_HUGE_VALL_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/HUGE_VALL.c)
    endblock()
  endif()

  cmake_helpers_try_run(C_INFINITY ${PROJECT_SOURCE_DIR}/cmake/INFINITY.c INFINITY)
  if(NOT C_INFINITY_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_INFINITY_REPLACEMENT)
      cmake_helpers_try_run(C_INFINITY_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/INFINITY.c)
      if(NOT C_INFINITY_REPLACEMENT_FOUND)
	block()
	  set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_INFINITY_REPLACEMENT_USING_DIVISION)
	  cmake_helpers_try_run(C_INFINITY_REPLACEMENT_USING_DIVISION ${PROJECT_SOURCE_DIR}/cmake/INFINITY.c)
	endblock()
      endif()
    endblock()
  endif()

  cmake_helpers_try_run(C_NAN ${PROJECT_SOURCE_DIR}/cmake/NAN.c NAN)
  if(NOT C_NAN_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_NAN_REPLACEMENT)
      cmake_helpers_try_run(C_NAN_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/NAN.c)
      if(NOT C_NAN_REPLACEMENT_FOUND)
	block()
	  set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_NAN_REPLACEMENT_USING_DIVISION)
	  cmake_helpers_try_run(C_NAN_REPLACEMENT_USING_DIVISION ${PROJECT_SOURCE_DIR}/cmake/NAN.c)
	endblock()
      endif()
    endblock()
  endif()

  cmake_helpers_try_run(C_ISINF ${PROJECT_SOURCE_DIR}/cmake/isinf.c isinf _isinf __isinf)
  if(NOT C_ISINF_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_ISINF_REPLACEMENT)
      cmake_helpers_try_run(C_ISINF_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/isinf.c)
    endblock()
  endif()

  cmake_helpers_try_run(C_ISNAN ${PROJECT_SOURCE_DIR}/cmake/isnan.c isnan _isnan __isnan)
  if(NOT C_ISNAN_FOUND)
    block()
      set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DHAVE_ISNAN_REPLACEMENT)
      cmake_helpers_try_run(C_ISNAN_REPLACEMENT ${PROJECT_SOURCE_DIR}/cmake/isnan.c)
    endblock()
  endif()

  cmake_helpers_try_run(C_STRTOLL ${PROJECT_SOURCE_DIR}/cmake/strtoll.c strtoll _strtoll __strtoll strtoi64 _strtoi64 __strtoi64)
  cmake_helpers_try_run(C_STRTOULL ${PROJECT_SOURCE_DIR}/cmake/strtoull.c strtoull _strtoull __strtoull strtou64 _strtou64 __strtou64)
  cmake_helpers_try_run(C_FPCLASSIFY ${PROJECT_SOURCE_DIR}/cmake/fpclassify.c fpclassify _fpclassify __fpclassify fpclass _fpclass __fpclass)
  cmake_helpers_try_run(C_FP_NAN ${PROJECT_SOURCE_DIR}/cmake/FP_CONSTANT.c FP_NAN)
  cmake_helpers_try_run(C__FPCLASS_SNAN ${PROJECT_SOURCE_DIR}/cmake/FP_CONSTANT.c _FPCLASS_SNAN)
  cmake_helpers_try_run(C__FPCLASS_QNAN ${PROJECT_SOURCE_DIR}/cmake/FP_CONSTANT.c _FPCLASS_QNAN)
  cmake_helpers_try_run(C_FP_INFINITE ${PROJECT_SOURCE_DIR}/cmake/FP_CONSTANT.c FP_INFINITE)
  cmake_helpers_try_run(C__FPCLASS_NINF ${PROJECT_SOURCE_DIR}/cmake/FP_CONSTANT.c _FPCLASS_NINF)
  cmake_helpers_try_run(C__FPCLASS_PINF ${PROJECT_SOURCE_DIR}/cmake/FP_CONSTANT.c _FPCLASS_PINF)
  cmake_helpers_try_run(C_CONST ${PROJECT_SOURCE_DIR}/cmake/const.c const)
  cmake_helpers_try_run(HAVE_C99MODIFIERS ${PROJECT_SOURCE_DIR}/cmake/c99modifiers.c)
  cmake_helpers_try_run(C_RESTRICT ${PROJECT_SOURCE_DIR}/cmake/restrict.c __restrict __restrict__ _Restrict restrict)
  cmake_helpers_try_run(C___BUILTIN_EXPECT ${PROJECT_SOURCE_DIR}/cmake/__builtin_expect.c __builtin_expect)
  cmake_helpers_try_run(C_SIGNBIT ${PROJECT_SOURCE_DIR}/cmake/signbit.c signbit _signbit __signbit)
  cmake_helpers_try_run(C_COPYSIGN ${PROJECT_SOURCE_DIR}/cmake/copysign.c copysign _copysign __copysign)
  cmake_helpers_try_run(C_COPYSIGNF ${PROJECT_SOURCE_DIR}/cmake/copysignf.c copysignf _copysignf __copysignf)
  cmake_helpers_try_run(C_COPYSIGNL ${PROJECT_SOURCE_DIR}/cmake/copysignl.c copysignl _copysignl __copysignl)
  #
  # We reserve the next lines to clang or gcc family
  #
  if(CMAKE_C_COMPILER_ID MATCHES "Clang|GNU")
    include(CheckCCompilerFlag)
    check_c_compiler_flag(-Werror C_COMPILER_HAS_WERROR_OPTION)
    if(C_COMPILER_HAS_WERROR_OPTION)
      block()
        list(APPEND CMAKE_C_FLAGS -Werror)
        foreach(_attribute alias aligned alloc_size always_inline artificial cold const constructor_priority constructor deprecated destructor dllexport dllimport error externally_visible fallthrough flatten format gnu_format format_arg gnu_inline hot ifunc leaf malloc noclone noinline nonnull noreturn nothrow optimize pure sentinel sentinel_position returns_nonnull unused used visibility warning warn_unused_result weak weakref)
	  string(TOUPPER ${_attribute} _attribute_toupper)
          set(CMAKE_HELPERS_TRY_RUN_COMPILE_DEFINITIONS -DC_GCC_FUNC_ATTRIBUTE_${_attribute_toupper})
	  cmake_helpers_try_run(C_GCC_FUNC_ATTRIBUTE_${_attribute_toupper} ${PROJECT_SOURCE_DIR}/cmake/gccfuncattribute.c)
          if(C_GCC_FUNC_ATTRIBUTE_${_attribute_toupper}_FOUND)
            set(C_GCC_FUNC_ATTRIBUTE_${_attribute_toupper} "__attribute__((${_attribute}))" CACHE STRING "GCC function attribute ${attribute}" FORCE)
            mark_as_advanced(C_GCC_FUNC_ATTRIBUTE_${_attribute})
          endif()
        endforeach()
      endblock()
    endif()
  endif()
  #
  # Common sizes checks
  #
  include(CheckTypeSize)
  set(CMAKE_EXTRA_INCLUDE_FILES_BACKUP ${CMAKE_EXTRA_INCLUDE_FILES})
  if(HAVE_STDINT_H)
    list(APPEND CMAKE_EXTRA_INCLUDE_FILES stdint.h)
  endif()
  if(HAVE_INTTYPES_H)
    list(APPEND CMAKE_EXTRA_INCLUDE_FILES inttypes.h)
  endif()
  if(HAVE_SYS_INTTYPES_H)
    list(APPEND CMAKE_EXTRA_INCLUDE_FILES sys/inttypes.h)
  endif()
  if(HAVE_STDDEF_H)
    list(APPEND CMAKE_EXTRA_INCLUDE_FILES stddef.h)
  endif()
  check_type_size("char" SIZEOF_CHAR)
  check_type_size("short" SIZEOF_SHORT)
  check_type_size("int" SIZEOF_INT)
  check_type_size("long" SIZEOF_LONG)
  check_type_size("long long" SIZEOF_LONG_LONG)
  check_type_size("float" SIZEOF_FLOAT)
  check_type_size("double" SIZEOF_DOUBLE)
  check_type_size("long double" SIZEOF_LONG_DOUBLE)
  check_type_size("unsigned char" SIZEOF_UNSIGNED_CHAR)
  check_type_size("unsigned short" SIZEOF_UNSIGNED_SHORT)
  check_type_size("unsigned int" SIZEOF_UNSIGNED_INT)
  check_type_size("unsigned long" SIZEOF_UNSIGNED_LONG)
  check_type_size("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
  check_type_size("size_t" SIZEOF_SIZE_T)
  check_type_size("void *" SIZEOF_VOID_STAR)
  check_type_size("ptrdiff_t" SIZEOF_PTRDIFF_T)
  #
  # Integer types
  #
  foreach(_sign "" "u")
    #
    # Remember that CHAR_BIT minimum value is 8 -;
    #
    foreach(_size 8 16 32 64)
      math(EXPR _sizeof "${_size} / ${C_CHAR_BIT}")
      #
      # Speciying a MIN for unsigned case is meaningless (it is always zero) and not in the standard.
      # We neverthless set it, well, to zero.
      #
      set(_mytypemin CMAKE_HELPERS_${_sign}int${_size}_min)
      string(TOUPPER ${_mytypemin} _MYTYPEMIN)
      set(_mytypemax CMAKE_HELPERS_${_sign}int${_size}_max)
      string(TOUPPER ${_mytypemax} _MYTYPEMAX)
      #
      # Always define the CMAKE_HELPERS_XXX_MIN and CMAKE_HELPERS_XXX_MAX
      #
      foreach(_c "char" "short" "int" "long" "long long")
        #
        # Without an extension, integer literal is always int,
        # so we have to handle the case of "long" and "long long"
        #
        if(_c STREQUAL "char")
          set(_extension "")
        elseif(_c STREQUAL "short")
          set(_extension "")
        elseif (_c STREQUAL "int")
          set(_extension "")
        elseif(_c STREQUAL "long")
          if("x${_sign}" STREQUAL "x")
            set(_extension "L")
          elseif(_sign STREQUAL "u")
            set(_extension "UL")
          else()
            message(FATAL_ERROR "Unsupported size ${_size}")
          endif()
        elseif(_c STREQUAL "long long")
          #
          # By definition, this C supports "long long", so it must support the "LL" suffix
	  #
          if("x${_sign}" STREQUAL "x")
            set(_extension "LL")
          elseif(_sign STREQUAL "u")
            set(_extension "ULL")
          else()
            message(FATAL_ERROR "Unsupported size ${_size}")
          endif()
        else()
          message(FATAL_ERROR "Unsupported c ${_c}")
        endif()
        string(TOUPPER ${_c} _C)
        string(REPLACE " " "_" _C "${_C}")
        if(HAVE_SIZEOF_${_C})
          if(${SIZEOF_${_C}} EQUAL ${_sizeof})
            #
            # In C language, a decimal constant without a u/U is always signed,
            # but an hexadecimal constant is signed or unsigned, depending on value and integer type range
	    #
            if(_size EQUAL 8)
	      if("x${_sign}" STREQUAL "x")
                set(${_MYTYPEMIN} "(-127${_extension} - 1${_extension})")
                set(${_MYTYPEMAX} "127${_extension}")
	      elseif(_sign STREQUAL "u")
		set(${_MYTYPEMIN} "0x00${_extension}")
                set(${_MYTYPEMAX} "0xFF${_extension}")
	      else()
                message(FATAL_ERROR "Unsupported size ${_size}")
	      endif()
            elseif(_size EQUAL 16)
	      if("x${_sign}" STREQUAL "x")
                set(${_MYTYPEMIN} "(-32767${_extension} - 1${_extension})")
                set(${_MYTYPEMAX} "32767${_extension}")
	      elseif(_sign STREQUAL "u")
                set(${_MYTYPEMIN} "0x0000${_extension}")
                set(${_MYTYPEMAX} "0xFFFF${_extension}")
	      else()
                message(FATAL_ERROR "Unsupported size ${_size}")
	      endif()
            elseif(_size EQUAL 32)
	      if("x${_sign}" STREQUAL "x")
                set(${_MYTYPEMIN} "(-2147483647${_extension} - 1${_extension})")
                set(${_MYTYPEMAX} "2147483647${_extension}")
	      elseif(_sign STREQUAL "u")
                set(${_MYTYPEMIN} "0x00000000${_extension}")
                set(${_MYTYPEMAX} "0xFFFFFFFF${_extension}")
	      else()
                message(FATAL_ERROR "Unsupported size ${_size}")
	      endif()
            elseif(_size EQUAL 64)
	      if("x${_sign}" STREQUAL "x")
                set(${_MYTYPEMIN} "(-9223372036854775807${_extension} - 1${_extension})")
                set(${_MYTYPEMAX} "9223372036854775807${_extension}")
	      elseif(_sign STREQUAL "u")
                set(${_MYTYPEMIN} "0x0000000000000000${_extension}")
                set(${_MYTYPEMAX} "0xFFFFFFFFFFFFFFFF${_extension}")
	      else()
                message(FATAL_ERROR "Unsupported size ${_size}")
	      endif()
            else()
	      MESSAGE(FATAL_ERROR "Unsupported size ${_size}")
            endif()
          endif()
        endif()
      endforeach()
      #
      # We handle the _least and _fast variations
      #
      foreach(_variation "" "_least" "_fast")

        set(_ctype    ${_sign}int${_variation}${_size}_t)
        string(TOUPPER ${_ctype} _CTYPE)

        set(_mytype    CMAKE_HELPERS_${_sign}int${_variation}${_size})
        string(TOUPPER ${_mytype} _MYTYPE)

        set(_MYTYPEDEF ${_MYTYPE}_TYPEDEF)

        unset(HAVE_${_MYTYPE})
        set(${_MYTYPE} "")
        set(${_MYTYPEDEF} "")

        SET (_found_type FALSE)
        foreach(_underscore "" "_" "__")
	  set(_type ${_underscore}${_sign}int${_variation}${_size}_t)
          string(TOUPPER ${_type} _TYPE)
          check_type_size(${_type} ${_TYPE})
          IF (HAVE_${_TYPE})
            set(HAVE_${_MYTYPE} TRUE)
            set(SIZEOF_${_MYTYPE} ${SIZEOF_${_TYPE}})
            set(${_MYTYPEDEF} ${_type})
            if(${_type} STREQUAL ${_ctype})
              set(HAVE_${_CTYPE} TRUE)
            else()
              set(HAVE_${_CTYPE} FALSE)
	    endif()
            break()
          endif()
        endforeach()
        if(NOT HAVE_${_MYTYPE})
          #
          # Try with C types
          #
          set(_found_type FALSE)
          foreach(_c "char" "short" "int" "long" "long long")
            if(_sign STREQUAL "u")
	      set(_c "unsigned ${_c}")
            endif()
            string(TOUPPER ${_c} _C)
            string(REPLACE " " "_" _C "${_C}")
            if(HAVE_SIZEOF_${_C})
	      if("x${_variation}" STREQUAL "x")
		if(${SIZEOF_${_C}} EQUAL ${_sizeof})
                  set(HAVE_${_MYTYPE} 1)
                  set(SIZEOF_${_MYTYPE} ${${_TYPE}})
                  set(${_MYTYPEDEF} ${_c})
                  break()
		endif()
	      elseif(_variation STREQUAL "_least")
		if(NOT (${SIZEOF_${_C}} LESS ${_sizeof}))
                  set(HAVE_${_MYTYPE} 1)
                  set(SIZEOF_${_MYTYPE} ${${_TYPE}})
                  set(${_MYTYPEDEF} ${_c})
                  break()
		endif()
	      elseif(_variation STREQUAL "_fast")
		#
		# We give the same result as _least
		#
		if(NOT (${SIZEOF_${_C}} LESS ${_sizeof}))
                  set(HAVE_${_MYTYPE} 1)
                  set(SIZEOF_${_MYTYPE} ${${_TYPE}})
                  set(${_MYTYPEDEF} ${_c})
                  break()
		endif()
	      else()
		message(FATAL_ERROR "Unsupported variation ${_variation}")
	      endif()
            endif()
          endforeach()
	endif()
        set(HAVE_${_MYTYPE} ${HAVE_${_MYTYPE}} CACHE BOOL "Have ${_MYTYPE}" FORCE)
        set(SIZEOF_${_MYTYPE} ${HAVE_${_MYTYPE}} CACHE INTERNAL "Size of ${_MYTYPE}" FORCE)
        set(HAVE_${_CTYPE} ${HAVE_${_CTYPE}} CACHE BOOL "Have ${_CTYPE}" FORCE)
        set(${_MYTYPEDEF} ${${_MYTYPEDEF}} CACHE STRING "Have ${_MYTYPEDEF}" FORCE)
        set(${_MYTYPEMIN} ${${_MYTYPEMIN}} CACHE STRING "Have ${_MYTYPEMIN}" FORCE)
        set(${_MYTYPEMAX} ${${_MYTYPEMAX}} CACHE STRING "Have ${_MYTYPEMAX}" FORCE)
        mark_as_advanced(
          HAVE_${_MYTYPE}
          SIZEOF_${_MYTYPE}
          HAVE_${_CTYPE}
          ${_MYTYPEDEF}
          ${_MYTYPEMIN}
          ${_MYTYPEMAX}
	)
      endforeach()
    endforeach()
  endforeach()
  #
  # Integer type capable of holding object pointers
  #
  foreach(_sign "" "u")
    set(_sizeof ${SIZEOF_VOID_STAR})
    set(_ctype    ${_sign}intptr_t)
    string(TOUPPER ${_ctype} _CTYPE)
    set(_mytype    CMAKE_HELPERS_${_sign}intptr)
    string(TOUPPER ${_mytype} _MYTYPE)
    set(_MYTYPEDEF ${_MYTYPE}_TYPEDEF)

    unset(HAVE_${_MYTYPE})
    set(${_MYTYPE} "")
    set(${_MYTYPEDEF} "")

    set(_type ${_sign}intptr_t)
    string(TOUPPER ${_type} _TYPE)
    check_type_size(${_type} ${_TYPE})
    if(HAVE_${_TYPE})
      set(HAVE_${_MYTYPE} 1)
      set(SIZEOF_${_MYTYPE} ${${_TYPE}})
      set(${_MYTYPEDEF} ${_type})
      if(${_type} STREQUAL ${_ctype})
        set(HAVE_${_CTYPE} 1)
      else()
        unset(HAVE_${_CTYPE})
      endif()
    endif()
    IF (NOT HAVE_${_MYTYPE})
      #
      # Try with C types
      #
      foreach(_c "char" "short" "int" "long" "long long")
        if("${_sign}" STREQUAL "u")
          set(_c "unsigned ${_c}")
        endif()
        string(TOUPPER ${_c} _C)
        string(REPLACE " " "_" _C "${_C}")
        if(HAVE_SIZEOF_${_C})
          if(${SIZEOF_${_C}} EQUAL ${_sizeof})
            set(HAVE_${_MYTYPE} 1)
            set(SIZEOF_${_MYTYPE} ${${_TYPE}})
            set(${_MYTYPEDEF} ${_c})
            break()
          endif()
        endif()
        set(HAVE_${_MYTYPE} ${HAVE_${_MYTYPE}} CACHE BOOL "Have ${_MYTYPE}" FORCE)
        set(SIZEOF_${_MYTYPE} ${HAVE_${_MYTYPE}} CACHE INTERNAL "Size of ${_MYTYPE}" FORCE)
        set(HAVE_${_CTYPE} ${HAVE_${_CTYPE}} CACHE BOOL "Have ${_CTYPE}" FORCE)
        set(${_MYTYPEDEF} ${${_MYTYPEDEF}} CACHE STRING "Have ${_MYTYPEDEF}" FORCE)
        mark_as_advanced(
          HAVE_${_MYTYPE}
          SIZEOF_${_MYTYPE}
          HAVE_${_CTYPE}
          ${_MYTYPEDEF}
	)
      endforeach()
    endif()
  endforeach()
  #
  # Header files generation
  #
  set(_header_files_generated FALSE)
  set(_output_gen_dir ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR})
  if(NOT DEFINED HAVE_STDINT_H)
    message(STATUS "[DEBUG] (NOT DEFINED HAVE_STDINT_H) return TRUE")
  else()
    message(STATUS "[DEBUG] (NOT DEFINED HAVE_STDINT_H) return FALSE")
  endif()
  if(NOT HAVE_STDINT_H)
    message(STATUS "[DEBUG] (NOT HAVE_STDINT_H) return TRUE")
  else()
    message(STATUS "[DEBUG] (NOT HAVE_STDINT_H) return FALSE")
  endif()
  if(CMAKE_HELPERS_GENERATE_STDINT_H)
    message(STATUS "[DEBUG] (CMAKE_HELPERS_GENERATE_STDINT_H) return TRUE")
  else()
    message(STATUS "[DEBUG] (CMAKE_HELPERS_GENERATE_STDINT_H) return FALSE")
  endif()
  if((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H))
    message(STATUS "[DEBUG] ((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H)) return TRUE")
  else()
    message(STATUS "[DEBUG] ((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H)) return FALSE")
  endif()
  if(((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H)) AND CMAKE_HELPERS_GENERATE_STDINT_H)
    message(STATUS "[DEBUG] (((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H)) AND CMAKE_HELPERS_GENERATE_STDINT_H) returns TRUE")
  else()
    message(STATUS "[DEBUG] (((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H)) AND CMAKE_HELPERS_GENERATE_STDINT_H) returns FALSE")
  endif()
  if(((NOT DEFINED HAVE_STDINT_H) OR (NOT HAVE_STDINT_H)) AND CMAKE_HELPERS_GENERATE_STDINT_H)
    set(_output_file ${_output_gen_dir}/stdint.h)
    message(STATUS "Generating ${_output_file}")
    configure_file(${PROJECT_SOURCE_DIR}/cmake/stdint.h.in ${_output_file})
    get_filename_component(_cmake_helpers_stdint_h_directory ${_output_file} DIRECTORY)
    set(_header_files_generated TRUE)
  endif()
  if(NOT DEFINED HAVE_INTTYPES_H)
    message(STATUS "[DEBUG] (NOT DEFINED HAVE_INTTYPES_H) return TRUE")
  else()
    message(STATUS "[DEBUG] (NOT DEFINED HAVE_INTTYPES_H) return FALSE")
  endif()
  if(NOT HAVE_INTTYPES_H)
    message(STATUS "[DEBUG] (NOT HAVE_INTTYPES_H) return TRUE")
  else()
    message(STATUS "[DEBUG] (NOT HAVE_INTTYPES_H) return FALSE")
  endif()
  if(CMAKE_HELPERS_GENERATE_INTTYPES_H)
    message(STATUS "[DEBUG] (CMAKE_HELPERS_GENERATE_INTTYPES_H) return TRUE")
  else()
    message(STATUS "[DEBUG] (CMAKE_HELPERS_GENERATE_INTTYPES_H) return FALSE")
  endif()
  if((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H))
    message(STATUS "[DEBUG] ((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H)) return TRUE")
  else()
    message(STATUS "[DEBUG] ((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H)) return FALSE")
  endif()
  if(((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H)) AND CMAKE_HELPERS_GENERATE_INTTYPES_H)
    message(STATUS "[DEBUG] (((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H)) AND CMAKE_HELPERS_GENERATE_INTTYPES_H) returns TRUE")
  else()
    message(STATUS "[DEBUG] (((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H)) AND CMAKE_HELPERS_GENERATE_INTTYPES_H) returns FALSE")
  endif()
  if(((NOT DEFINED HAVE_INTTYPES_H) OR (NOT HAVE_INTTYPES_H)) AND CMAKE_HELPERS_GENERATE_INTTYPES_H)
    set(_output_file ${_output_gen_dir}/inttypes.h)
    message(STATUS "Generating ${_output_file}")
    configure_file(${PROJECT_SOURCE_DIR}/cmake/inttypes.h.in ${_output_file})
    get_filename_component(_cmake_helpers_inttypes_h_directory ${_output_file} DIRECTORY)
    set(_header_files_generated TRUE)
  endif()
  if(_header_files_generated)
    message(STATUS "\${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_INCLUDEDIR} should be added by caller to its include path")
  endif()
  set(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES_BACKUP})
  #
  # Check GNU features
  #
  check_symbol_exists(__GNU_LIBRARY__ "features.h" _GNU_SOURCE)
endfunction()
